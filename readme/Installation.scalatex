@import Main._
@import scalafix.Readme._
@import scalafix.rewrite._
@import scalafix.{Versions => V}
@import scalafix.cli.Cli

@sect{Installation}

  @p
    Scalafix can used either as a tool or a library.
    Integrations are currently limited to the command-line, but it may be possible
    to add IDE integrations in the future.

  @sect{sbt-scalafix}
    The sbt-plugin is the recommended integration for semantic rewrites.

    @hl.scala
      addSbtPlugin("ch.epfl.scala" % "sbt-scalafix" % "@V.stableVersion")

    @ul
      @li
        @code{sbt scalafix <Rewrite>} will run @code{<Rewrite>} from
        @sect.ref{Rewrites}
      @li
        Configuration is read from @code{.scalafix.conf}.
        See @sect.ref{Configuration} for more details on how to customize which rewrites to run.
      @li
        Scalafix supports 2.11 and 2.12.
        Projects with @code{scalaVersion} 2.10 are ignored by scalafix.

  @sect{scalafix-core}
    Scalafix can be used as a library to run custom rewrites.
    @hl.scala
      libraryDependencies += "ch.epfl.scala" % "scalafix-core" % "@V.stableVersion" cross CrossVersion.full


    By using scalafix as a library, you have full control of how/when/where
    rewrites are written.

    @p
      When writing custom rewrites, you should decide what API you need.
      There currently available APIs are:

      @ul
        @li
          Syntactic api. This is the easiest option but also the least powerful one.
          It does not provide access to compilation information such as symbols/types.
          Just create a @code{scalafix.rewrite.Rewrite[Any]} and go!
        @li
          Semantic API. This requires a @code{scala.meta.Mirror}, which is an implementation
          of the
          @lnk("Scalameta semantic API",
               "https://github.com/scalameta/scalameta/blob/master/changelog/1.8.0.md").
          The semantic API can be used with @sect.ref{sbt-scalafix} or
          @lnk("sbt-scalahost", "https://github.com/scalameta/sbt-semantic-example").
    @p
      Scalafix as a library is still under heavy development.
      Feedback is very welcome.
      Be prepared for breaking changes.

  @sect{scalafix-cli}
    The recommended way to install the scalafix command-line interface is with
    @lnk("coursier", "https://github.com/coursier/coursier#command-line").

    @hl.scala
      // coursier
      coursier bootstrap ch.epfl.scala:scalafix-cli_@(V.scalaVersion):@(V.stableVersion) -f --main scalafix.cli.Cli -o scalafix
      ./scalafix --help

      // homebrew
      brew install --HEAD olafurpg/scalafmt/scalafix
      scalafix --help

      // wget
      wget -O scalafix https://github.com/scalacenter/scalafix/blob/master/scalafix?raw=true
      ./scalafix --help

    @p
      Once the scalafix cli is installed, consult the --help page for further usage
      instructions

  @sect{--help}
    @hl.scala(Cli.helpMessage)

