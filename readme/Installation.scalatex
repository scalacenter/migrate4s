@import Main._
@import scalafix.Readme._
@import scalafix.rewrite._
@import scalafix.{Versions => V}
@import scalafix.cli.Cli

@sect{Installation}

  @p
    Scalafix can used either as a tool or a library.
    Integrations are currently limited to the command-line, but it may be possible
    to add IDE integrations in the future.

  @sect{sbt-scalafix}
    sbt-scalafix is an integration to run pre-made scalafix rewrites as sbt commands.

    @hl.scala
      addSbtPlugin("ch.epfl.scala" % "sbt-scalafix" % "@V.stableVersion")

    @ul
      @li
        @code{sbt scalafix} runs @sect.ref{Rewrites}.
      @li
        uses scalafix-nsc, a compiler plugin, to run rewrites during compilation.
        The compiler plugin is disabled by default, @code{scalafixEnabled in ThisBuild := true}
        enables the compiler plugin for your entire build.
      @li
        Configuration is read from @code{.scalafix.conf}.
        See @sect.ref{Configuration} for more details on how to customize which rewrites to run.
      @li
        Scalafix supports 2.11 and 2.12.
        Projects with @code{scalaVersion} 2.10 are ignored by scalafix.

  @sect{sbt-scalahost}
    sbt-scalahost is an integration to run custom scalafix rewrites using the scala.meta
    semantic API.

    @hl.scala
      // project/plugins.sbt
      addSbtPlugin("org.scalameta" % "sbt-scalahost" % "@V.scalameta")

      // build.sbt
      val rewrites = project
        .settings(
          scalaVersion := "2.11.8", // 2.12.x is also supported
          libraryDependencies += "ch.epfl.scala" % "scalafix-core" % "@V.stableVersion" cross CrossVersion.full
        )
        .dependsOn(
          projectToPerformRewritesOn % Scalameta
        )

      // in rewrites/src/main/scala/Rewrites.scala
      ...
      implicit mirror = scala.meta.Mirror()
      val source = mirror.sources.head
      val ctx = scalafix.rewrite.RewriteCtx(source,
        scalafix.config.ScalafixConfig(), mirror)
      val patched = Patch(source, Seq(
        scalafix.util.TreePatch.AddGlobalImport(
          importer"scala.collection.immutable.Seq"))
      )
      ...

    For more information about sbt-scalahost, see
    @lnk("sbt-semantic-example", "https://github.com/scalameta/sbt-semantic-example").
    For more information about using scalafix as a library, see @sect.ref{scalafix-core}.

  @sect{scalafix-core}
    Scalafix can be used as a library to run custom rewrites.
    @hl.scala
      // < 0.3.3
      libraryDependencies += "ch.epfl.scala" %% "scalafix-core" % "@V.stableVersion"
      // 0.3.3 and onwards
      libraryDependencies += "ch.epfl.scala" % "scalafix-core" % "@V.stableVersion" cross CrossVersion.full

      // pre-release version
      @bintrayRepo
      libraryDependencies += "ch.epfl.scala" % "scalafix-core" % "@V.version" cross CrossVersion.full

    By using scalafix as a library, you have full control of how/when/where
    rewrites are written.

    @p
      When writing custom rewrites, you should decide what API you need.
      There currently available APIs are:

      @ul
        @li
          Syntactic api. This is the easiest option but also the least powerful one.
          It does not provide access to compilation information such as symbols/types.
          Just create a @code{scalafix.rewrite.Rewrite[Any]} and go!
        @li
          @code{scala.meta.Mirror}, aka.
          @lnk("scala.meta semantic API",
               "https://github.com/scalameta/scalameta/blob/master/changelog/1.6.0.md#semantic-api").
          See @sect.ref{sbt-scalahost} on how to construct a @code{scala.meta.Mirror}.
          Once you have a @code{Mirror} instance, you can create a
          @code{scalafix.rewrite.RewriteCtx[Mirror]} for each @code{scala.meta.Source} in
          @code{scala.meta.Mirror.sources}.
        @li
          @code{scalafix.rewrite.ScalafixMirror}. This option is currently in
          use by @sect.ref{sbt-scalafix} but is being phased out in favor of
          @code{Mirror}. @code{ScalafixMirror} extends @code{Mirror} with a
          few custom methods that we will try to eventually contribute upstream
          to @code{Mirror}.
          @p
            It is possible to run custom rewrites using @code{ScalafixMirror}, but
            the setup is complex.
            You need to ensure that your compiled rewrite is included in the compiler
            classpath. Once the rewrite is in the compiler classpath, you
            can enable your rewrite with
            @code{rewrites = [_root_.fully.qualified.name.of.rewrite]}.
            Note, your rewrite needs to be an @code{object}.
            For more question about this option, don't hesitate to ask on Gitter.

    @p
      Scalafix as a library is still under heavy development.
      Feedback is very welcome.
      Be prepared for breaking changes.

  @sect{scalafix-cli}
    @p
      A 16kb bootstrap script can be downloaded from @lnk("here", "https://github.com/scalacenter/scalafix/raw/master/scalafix").
      The script will download necessary dependencies on the first run.

    @p
      Alternatively, you can build the boostrap script yourself with
      @lnk("coursier", "https://github.com/coursier/coursier#command-line").
      Once you have the @code{coursier} command-line installed, run

      @hl.scala
        // pre-release
        coursier bootstrap ch.epfl.scala:scalafix-fatcli_@(V.scalaVersion):@(V.version) -r bintray:scalameta/maven -r 'ivy:https://dl.bintray.com/scalameta/maven/[organisation]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]' -f --main scalafix.cli.Cli -o scalafix

      @p
        The @code{fatcli} module depends on the @code{scalahost-nsc} compiler plugin
        fatjar, making it unnecessary to pass in the @code{--scalahost-nsc-plugin-path}
        flag.

      @p
        Once the scalafix cli is installed, consult the help page for further usage
        instructions

    @hl.scala(Cli.helpMessage)

  @sect{scalafix-nsc}
    @b{Note.} scalafix-nsc is being phased out in favor of scalahost-nsc.

    @p
      Scalafix can be used directly as a compiler plugin:
      @hl.scala
        // download
        https://repo1.maven.org/maven2/ch/epfl/scala/scalafix-nsc_2.12/@V.stableVersion/scalafix-nsc_2.12-@(V.stableVersion + ".jar")
        // compile
        scalac -Xplugin:/path/to/scalafix-nsc_2.12-@(V.stableVersion + ".jar") mycode.scala

      @ul
        @li
          The compiler plugin writes fixes directly to source files during compilation.
        @li
          To specify a configuration file @code{-P:scalafix:/full/path/to/.scalafix.conf}.
        See @sect.ref{Configuration} for more details.

