@import Main._
@import scalafix.Readme._
@import scalafix.rewrite._

@sect{Rewrites}
  @p
    Scalafix comes with a few rewrites out-of-the-box.
    These rewrites have been chosen to meet the long-term goal of scalafix to
    @lnk("clarify the Scala to Dotty migration path",
        "http://scala-lang.org/blog/2016/05/30/scala-center-advisory-board.html#the-first-meeting").
    To create custom rewrites, see @sect.ref{scalafix-core}.

  @sect(ExplicitReturnTypes.toString)
    Dotty requires implicit @code{val}s and @code{def}s to explicitly annotate
    return types.
    The @ExplicitReturnTypes.toString rewrite inserts the inferred type from the
    compiler for implicit definitions that are missing an explicit return type.
    For example,

    @hl.scala
      // before
      implicit val tt = liftedType
      // after
      implicit val tt: TypedType[R] = liftedType

    @ul
      @li
        @note. This rewrite inserts fully qualified names, even if the short name
        is available in scope. Track @issue(169) for updates on making the
        rewrite insert shorter names.
      @li
        @note. This rewrite currently only inserts fully qualified names
        for implicit vals. However, there exists configuration to limit
        give fine-grained control on how the rewrite works, see
        @lnk("ExplicitReturnTypesConfig",
          "https://github.com/scalacenter/scalafix/blob/db6152304aaef19c4a8ba4fc77b732264bf52fec/scalafix-core/src/main/scala/scalafix/config/ExplicitReturnTypesConfig.scala").


  @sect(RemoveUnusedImports.toString)
    This rewrite acts upon "Unused import" warnings emitted by the Scala compiler.
    See @lnk("slick/slick/pulls#1736", "https://github.com/slick/slick/pull/1736")
    for an example diff from running @code{sbt "scalafix RemoveUnusedImports"}.

    @p
      @note. This rewrite does a best-effort at preserving original formatting.
      In some cases, the rewriten code may be formatted weirdly

      @hl.scala
        // before
        import scala.concurrent.{
          CancellationException,
          TimeoutException
        }
        // after
        import scala.concurrent.

          TimeoutException

      It's recommended to use a code formatter to clean up missing or superfluous
      whitespace.

    @p
      @note. This rewrite is new and has only been tested on a few large projects
      such as Slick and Scalding. Please report if you hit on buggy behavior.

  @sect(RemoveXmlLiterals.toString)
    This rewrites replaces XML literals with a @code{xml""} interpolator
    from @lnk("scala-xml-quote", "https://github.com/densh/scala-xml-quote")
    project.

    @hl.scala
      // tries to use single quote when possible
      <div>{bar}</div>
      xml"<div>${bar}</div>"

      // multi-line literals get triple quote
      <div>
        <span>{"Hello"}</span>
      </div>
      xml"""<div>
        <span>${"Hello"}</span>
      </div>"""

      // skips XML literals in pattern position
      x match { case <a></a> => }
      x match { case <a></a> => }

      // replaces escaped {{ with single curly brace {
      <div>{{</div>
      xml"<div>{</div>"


  @sect(ProcedureSyntax.toString)
    "Procedure syntax" is not supported in Dotty.
    Methods that use procedure syntax should use regular method syntax instead.
    For example,

    @hl.scala
      // before: procedure syntax
      def main(args: Seq[String]) {
        println("Hello world!")
      }
      // after: regular syntax
      def main(args: Seq[String]): Unit = {
        println("Hello world!")
      }

  @sect(VolatileLazyVal.toString)
    @p
      Adds a @code{@@volatile} annotation to lazy vals.
      The @code{@@volatile} annotation is needed to maintain thread-safe
      behaviour of lazy vals in Dotty.

    @hl.scala
      // before
      lazy val x = ...
      // after
      @@volatile lazy val x = ...

    @p
      With @code{@@volatile}, Dotty uses a deadlock free scheme that is
      comparable-if-not-faster than the scheme used in scalac.

  @sect(ExplicitUnit.toString)
    @p
      Adds an explicit @code{Unit} return type to @code{def} declarations without a return type

    @hl.scala
      // before
      trait A {
        def doSomething
      }
      // after
      trait A {
        def doSomething: Unit
      }

    @p
      Such members already have a return type of @code{Unit} and sometimes this is unexpected.
      Adding an explicit return type makes it more obvious.

  @sect(DottyVarArgPattern.toString)
    @p
      Replaces @code{@@} symbols in VarArg patterns with a colon (@code{:}). See @lnk{http://dotty.epfl.ch/docs/reference/changed/vararg-patterns.html}

    @hl.scala
      // before
      case List(1, 2, xs @@ _*)
      // after
      case List(1, 2, xs : _*)

  @sect(NoAutoTupling.toString)
    @p
      Adds explicit tuples around argument lists where auto-tupling is occurring.

    @hl.scala
      // before
      def someMethod(t: (Int, String)) = ...
      someMethod(1, "something")
      // after
      def someMethod(t: (Int, String)) = ...
      someMethod((1, "something"))

    @p
      Auto-tupling is a feature that can lead to unexpected results, making code to compile when one would expect a compiler error instead. Adding explicit tuples makes it more obvious.

    @note Some auto-tupling cases are left unfixed, namely the ones involving @code{Function1} instead of methods. For example this code won't be affected by the rewrite:

      @hl.scala
        def f: (((Int, String)) => ((String, List[Int])) => Int) = a => b => a._1
        f(1, "")("a", Nil)

      Same for:

      @hl.scala
        val f = (a: (Int, Boolean)) => a
        f(2, true)

      This is a known limitation and you can track the progress on this @lnk("here", "https://github.com/scalacenter/scalafix/issues/147").

  @sect(NoValInForComprehension.toString)
    @p
      Removes @code{val} from definitions in for-comprehension.

    @hl.scala
      // before
      for {
        n <- List(1, 2, 3)
        val inc = n + 1
      } yield inc
      // after
      for {
        n <- List(1, 2, 3)
        inc = n + 1
      } yield inc

    @p
      The two syntaxes are equivalent and the presence of the @code{val} keyword has been deprecated since Scala 2.10.

  @sect(NoExtendsApp.toString)
    @p
      Replaces usage of the @code{scala.App} trait with an explicit main function.

    @hl.scala
      // before
      object Main extends App {
        println(s"Hello ${args(0)}")
      }

      // after
      object Main {
        def main(args: Array[String]) = {
          println(s"Hello ${args(0)}")
        }
      }

    @p
      The @code{scala.App} trait uses @code{DelayedInit}, which has been dropped in Dotty.
      More info @lnk("here", "https://github.com/lampepfl/dotty/blob/master/docs/docs/reference/dropped/delayed-init.md").

  @sect{Planned rewrites...}
    See @lnk("here", "https://github.com/scalacenter/scalafix/labels/rewrite").
