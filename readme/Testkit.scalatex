@import Main._
@import scalafix.Readme._
@import scalafix.rewrite._
@import scalafix.{Versions => V}
@import scalafix.cli.Cli

@sect{scalafix-testkit}
  @p
    Use scalafix-testkit for a rapid edit/run/debug cycle while implementing
    semantic scalafix rewrites.

  @p
    Note. You may prefer to use the @sect.ref{scalacenter/scalafix.g8} template
    to generate the following boilerplate.
    In case of any problems, don't hestitate to ask on @gitter.

  @p
    The following instructions assume you are using sbt.
    However, scalafix-testkit can be used with any build tool. Please
    ask on the Gitter channel for help on setting up scalafix-testkit  with another build tool.

  @p
    You will need three projects to run scalafix-testkit.
    @hl.scala
      // project/plugins.sbt
      addSbtPlugin("com.eed3si9n" % "sbt-buildinfo" % "0.6.1")
      addSbtPlugin("org.scalameta" % "sbt-scalahost" % "@V.scalameta")
      // build.sbt
      lazy val testsInput = project.in(file("scalafix/input"))
        .settings(scalametaSourceroot := sourceDirectory.in(Compile).value)
      lazy val testsExpectedOutput = project.in(file("scalafix/output"))
      lazy val tests = project
        .in(file("scalafix/tests"))
        .settings(
          libraryDependencies += "ch.epfl.scala" % "scalafix-testkit" % "@V.stableVersion" % Test cross CrossVersion.full,
           buildInfoPackage := "myproject.scalafix.tests",
           buildInfoKeys := Seq[BuildInfoKey](
             "inputSourceroot" ->
               sourceDirectory.in(testsInput, Compile).value,
             "outputSourceroot" ->
               sourceDirectory.in(testsExpectedOutput, Compile).value,
             "mirrorClasspath" -> classDirectory.in(testsInput, Compile).value
           )
        )
        .dependsOn(testsInput % Scalameta)

    Then glue everything together in a test suite like this.

    @hl.scala
      //scalafix/tests/src/test/scala/SemanticTests.scala
      package scalafix.tests

      import scala.meta._
      import scalafix.testkit._

      class SemanticTests
        extends SemanticRewriteSuite(
          Database.load(Classpath(AbsolutePath(BuildInfo.mirrorClasspath))),
          AbsolutePath(BuildInfo.inputSourceroot),
          Seq(
            AbsolutePath(BuildInfo.outputSourceroot)
          )
        ) {
        runAllTests()
      }


    Specify scalafix configuration inside comment at top of file like this.

    @hl.ref(wd/"scalafix-tests"/"input"/"src"/"main"/"scala"/"test"/"ExplicitUnit.scala")

    And then testkit checks if rewritten codes match the one in output.

    @hl.ref(wd/"scalafix-tests"/"output"/"src"/"main"/"scala"/"test"/"ExplicitUnit.scala")

  @p
    For a full working example, see the
    @lnk("scalafix repo", "https://github.com/scalacenter/scalafix").

  @p
    @b{Note:} this working example specifies an extra output directory for @b{dotty}. Please check it out. :)





