@import Main._
@import scalafix.Readme._
@import scalafix.rewrite._
@import scalafix.{Versions => V}
@import scalafix.cli.Cli

@sect{scalafix-testkit}
  @p
    Use scalafix-testkit for a rapid edit/run/debug cycle while implementing
    semantic scalafix rewrites.

  @p
    @b{Note.} Scalafix-testkit is a new module under active development and
    is currently only available as a pre-release version. To depend on
    scalafix-testkit

    @hl.scala
      @bintrayRepo
      @bintrayIvyRepo // will be unnecessary in the future
      libraryDependencies += "ch.epfl.scala" % "scalafix-testkit" % "@V.version" % Test cross CrossVersion.full

  @p
    Tests are written in @code{.source} text files in some directory
    of your project. A good place to put the tests is under @code{src/test/resources}
    so that tests re-run on file save when using @code{~test}.

  @p
    Unit tests are written in the following format:
    @hl.scala
      <<< This is a test name
      object OriginalCode
      >>>
      object ExpectedCode
      <<< This is another test file
      object OriginalCode
      >>>
      object ExpectedCode
  @p
    To setup a test suite with scalafix-testkit:

    @hl.ref(wd/"scalafix-tests"/"src"/"test"/"scala"/"scalafix"/"SemanticTests.scala")

  @p
    Define @code{.scalafix.conf} configuration at the top of a @code{.source} file:

    @hl.scala
      $ cat MyTest.source
      rewrites = [ProcedureSyntax]
      <<< basic main function
      object Main { def main(args: Seq[String]) { println(args) } }
      >>>
      object Main { def main(args: Seq[String]): Unit = { println(args) } }

  @p
    When a test fails, a failure report shows a diff between the expected
    and obtained output of the rewrite.

    @hl.scala
      ===========
      => Obtained
      ===========
      object Main { def main(args: Seq[String]) { println(args) } }

      =======
      => Diff
      =======
      - object Main { def main(args: Seq[String]) { println(args) } }
      + object Main { def main(args: Seq[String]): Unit = { println(args) } }

  @p
    To run only a single test, prefix the test name with @code{ONLY}
    @hl.scala
      <<< ONLY This test will run
      object OriginalCode
      >>>
      object ExpectedCode
      <<< This test is skipped
      object OriginalCode
      >>>
      object ExpectedCode

  @p
    To skip a single test, prefix the test name with @code{SKIP}
    @hl.scala
      <<< SKIP This test will NOT run
      object OriginalCode
      >>>
      object ExpectedCode
      <<< This test will run
      object OriginalCode
      >>>
      object ExpectedCode

  @p
    For more resources on scalafix-testkit, clone the scalafix repo and
    look at the sources in the @code{scalafix-tests} module.
