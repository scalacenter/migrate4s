rewrites = [ExplicitImplicit]
<<< list
class A {
  implicit val x = List(1)
}
>>>
class A {
  implicit val x: List[Int] = List(1)
}
<<< map
class A {
  implicit val x = Map(1 -> "STRING")
}
>>>
class A {
  implicit val x: Map[Int, String] =
    Map(1 -> "STRING")
}
<<< renamed map
import scala.collection.immutable.{Map => MyMap}
class A {
  implicit val x = MyMap(1 -> "STRING")
}
>>>
import scala.collection.immutable.{Map => MyMap}
class A {
  implicit val x: MyMap[Int, String] =
    MyMap(1 -> "STRING")
}
<<< local map definition
class A {
  case class Map[K](elem: (K, String))
  implicit val x = Map(1 -> "STRING")
}
>>>
class A {
  case class Map[K](elem: (K, String))
  implicit val x: Map[Int] = Map(1 -> "STRING")
}
<<< def works
class A {
  implicit def x = 2
}
>>>
class A {
  implicit def x: Int = 2
}
<<< def param works
class A {
  implicit def x[T](e: T) = e
}
>>>
class A {
  implicit def x[T](e: T): T = e
}
<<< type param
class A {
  implicit def x = new Array[String](10)
}
>>>
class A {
  implicit def x: Array[String] = new Array[String](10)
}
<<< T.this
class A {
  class B { class C }
  implicit val x = new B
  implicit val y = new x.C
}
>>>
class A {
  class B { class C }
  implicit val x: B = new B
  implicit val y: x.C = new x.C
}
<<< NOWRAP higher kinded cats
package cats {
  package laws {
    package discipline {
      trait CartesianTests[F[_]]
      object CartesianTests {
        trait Isomorphisms[F[_]]
        object Isomorphisms {
          def id[T[_]]: Isomorphisms[T] = ???
        }
      }
    }
  }
}
package cats {
  trait Id[T]
}
package cats {
  package tests {
    import cats.laws.discipline._
    class IdTests {
      implicit val iso = CartesianTests.Isomorphisms.id[Id]
    }
  }
}
>>>
package cats {
  package laws {
    package discipline {
      trait CartesianTests[F[_]]
      object CartesianTests {
        trait Isomorphisms[F[_]]
        object Isomorphisms {
          def id[T[_]]: Isomorphisms[T] = ???
        }
      }
    }
  }
}
package cats {
  trait Id[T]
}
package cats {
  package tests {
    import cats.laws.discipline._
    class IdTests {
      implicit val iso: CartesianTests.Isomorphisms[Id] = CartesianTests.Isomorphisms.id[Id]
    }
  }
}
<<< higher kinded
import scala.concurrent.Future
package hello {
  trait Id[F[_]]
  object Id {
    def ident[F[_]]: Id[F] = ???
  }
}
object World {
  import hello._
  implicit val futureId = Id.ident[scala.concurrent.Future]
}
>>>
import scala.concurrent.Future
package hello {
  trait Id[F[_]]
  object Id {
    def ident[F[_]]: Id[F] = ???
  }
}
object World {
  import hello._
  implicit val futureId: Id[Future] = Id.ident[scala.concurrent.Future]
}
<<< path dependent type
class A {
  trait C {
    class B
  }
  val c = new C {}
  implicit val x = new c.B
}
>>>
class A {
  trait C {
    class B
  }
  val c = new C {}
  implicit val x: c.B = new c.B
}
<<< path dependent type II
class A {
  object D {
    val c = new C {}
  }
  trait C {
    class B
  }
  implicit val x = new D.c.B
}
>>>
class A {
  object D {
    val c = new C {}
  }
  trait C {
    class B
  }
  implicit val x: D.c.B = new D.c.B
}
<<< renamed term in type selection
package E {
  object D {
    class C
  }
}
class A {
  import E.{D => d}
  implicit val x = new d.C
}
>>>
package E {
  object D {
    class C
  }
}
class A {
  import E.{D => d}
  implicit val x: d.C = new d.C
}
<<< renamed term in deeper type selection
package E {
  object D {
    object C {
      class B
    }
  }
}
class A {
  import E.{D => d}
  import d.{C => c}
  implicit val x = new c.B
}
>>>
package E {
  object D {
    object C {
      class B
    }
  }
}
class A {
  import E.{D => d}
  import d.{C => c}
  implicit val x: c.B = new c.B
}
<<< two classes
class A[T](e: T)
class B {
  implicit val x = new A(10)
}
>>>
class A[T](e: T)
class B {
  implicit val x: A[Int] = new A(10)
}
<<< deeper package
class A[T](e: T)
package foo {
  class B {
    implicit val x = new A(10)
  }
}
>>>
class A[T](e: T)
package foo {
  class B {
    implicit val x: A[Int] = new A(10)
  }
}
<<< shallow package
package foo {
  class A[T](e: T)
}
class B {
  implicit val x = new foo.A(10)
}
>>>
package foo {
  class A[T](e: T)
}
class B {
  implicit val x: foo.A[Int] = new foo.A(10)
}
<<< implicitly 2712 trick
class A {
  implicit val s = "string"
  implicit val x = implicitly[String]
}
>>>
class A {
  implicit val s: String = "string"
  implicit val x = implicitly[String]
}
<<< shorten imported name
import scala.collection.immutable.Map
class A {
  implicit val x = Map(1 -> "")
}
>>>
import scala.collection.immutable.Map
class A {
  implicit val x: Map[Int, String] = Map(1 -> "")
}
<<< shorten imported name 2
import scala.collection.immutable._
class A {
  implicit val x = Map(1 -> "")
}
>>>
import scala.collection.immutable._
class A {
  implicit val x: Map[Int, String] = Map(1 -> "")
}
<<< enclosing package strip is last
package b { class B }
package a {
  import b.B
  class A {
    implicit val x = new B
  }
}
>>>
package b { class B }
package a {
  import b.B
  class A {
    implicit val x: B = new B
  }
}
<<< inner inner object
object A {
  object B {
    class C
    object C {
      implicit val x = List(new C)
    }
  }
}
>>>
object A {
  object B {
    class C
    object C {
      implicit val x: List[C] = List(new C)
    }
  }
}
<<< sibling objects
object D {
  class B
}
object A {
  class C {
    implicit val x = List(new D.B)
  }
}
>>>
object D {
  class B
}
object A {
  class C {
    implicit val x: List[D.B] = List(new D.B)
  }
}
<<< slick tuple
object slick {
  case class Supplier(id: Int, name: String)
  implicit val supplierGetter = (arg: (Int, String)) => Supplier(arg._1, arg._2)
}
>>>
object slick {
  case class Supplier(id: Int, name: String)
  implicit val supplierGetter: ((Int, String)) => Supplier = (arg: (Int, String)) => Supplier(arg._1, arg._2)
}
<<< NOWRAP package import
package scala.concurrent {
  package banana {
    object x {
      implicit val f = Future.successful(1)
    }
  }
}
>>>
package scala.concurrent
package banana
object x {
  implicit val f: Future[Int] = Future.successful(1)
}
<<< SKIP global
class Global {
  type Position = Int
  class Symbol {
    def pos: Position = ???
  }
}
trait Compiler {
  val g: Global
  val s: g.Symbol
}
trait Foo { self: Compiler =>
  val addons: Object {
    val g: Foo.this.g.type
  }
  import g._
  import addons._
  implicit val x = s.pos
}
>>>
class Global {
  type Position = Int
  class Symbol {
    def pos: Position = ???
  }
}
trait Compiler {
  val g: Global
  val s: g.Symbol
}
trait Foo { self: Compiler =>
  val addons: Object {
    val g: Foo.this.g.type
  }
  import g._
  import addons._
  implicit val x: Position = s.pos
}
