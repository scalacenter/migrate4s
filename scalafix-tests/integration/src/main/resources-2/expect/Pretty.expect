[7:7..7:17]:      test/PrettyTest# => class PrettyTest extends AnyRef { +4 decls }
[7:18..7:18]:     test/PrettyTest#`<init>`(). => primary ctor <init>()
[8:3..8:14]:      *[Int]
[8:3..8:7]:       *.apply[Int]
[9:3..13:12]:     orig(1.to(10)).flatMap[Int](
                    { (i) =>
                      orig(2.to(20)).withFilter(
                        { (j) => orig(i > i) }
                      ).map[Int]({ (j) => orig(j) })
                    }
                  )
[10:10..10:11]:   intWrapper(*)
[11:10..11:11]:   intWrapper(*)
[14:3..18:15]:    orig(Future(1.to(10)))(global).foreach[Unit](
                    { (i) =>
                      orig(Future(2.to(i.length)))(global).foreach[Unit](
                        { (j) => orig(println(j)) }
                      )(global)
                    }
                  )(global)
[15:10..15:16]:   *.apply[Inclusive]
[15:17..15:18]:   intWrapper(*)
[16:10..16:16]:   *.apply[Inclusive]
[16:17..16:18]:   intWrapper(*)
[21:9..21:14]:    test/PrettyTest#Inner# => class Inner extends AnyRef { +1 decls }
[21:14..21:14]:   test/PrettyTest#Inner#`<init>`(). => primary ctor <init>()
[22:7..22:8]:     test/PrettyTest#a. => val method a: PrettyTest
[23:7..23:8]:     test/PrettyTest#b. => val method b: a.Inner
[25:3..25:9]:     *.apply[AnyRef {
                    local4 => abstract method bar(a: Int): Int
                    local6 => abstract method foo(a: Int): Int
                  }]
[30:3..30:9]:     *.apply[a.Inner]
[31:3..31:9]:     *.apply[Int with String {}]
[32:3..32:9]:     *.apply[PrettyTest]
[39:7..39:10]:    test/ann# => class ann[T] extends Annotation with StaticAnnotation { +2 decls }
[39:11..39:12]:   test/ann#[T] => typeparam T
[39:13..39:13]:   test/ann#`<init>`(). => primary ctor <init>(x: T)
[39:14..39:15]:   test/ann#x. => private[this] val method x: T
[40:7..40:11]:    test/ann1# => class ann1 extends Annotation with StaticAnnotation { +1 decls }
[40:12..40:12]:   test/ann1#`<init>`(). => primary ctor <init>()
[41:7..41:11]:    test/ann2# => class ann2 extends Annotation with StaticAnnotation { +1 decls }
[41:12..41:12]:   test/ann2#`<init>`(). => primary ctor <init>()
[43:7..43:8]:     test/B# => class B extends AnyRef { +1 decls }
[43:8..43:8]:     test/B#`<init>`(). => primary ctor <init>()
[45:7..45:8]:     test/C# => class C extends AnyRef { +1 decls }
[45:8..45:8]:     test/C#`<init>`(). => primary ctor <init>()
[47:7..47:8]:     test/P# => class P extends AnyRef { +4 decls }
[47:9..47:9]:     test/P#`<init>`(). => primary ctor <init>()
[48:9..48:10]:    test/P#C# => class C extends AnyRef { +1 decls }
[48:10..48:10]:   test/P#C#`<init>`(). => primary ctor <init>()
[49:9..49:10]:    test/P#X# => class X extends AnyRef { +1 decls }
[49:10..49:10]:   test/P#X#`<init>`(). => primary ctor <init>()
[50:7..50:8]:     test/P#x. => val method x: X
[53:7..53:8]:     test/T# => class T extends AnyRef { +4 decls }
[53:9..53:9]:     test/T#`<init>`(). => primary ctor <init>()
[54:9..54:10]:    test/T#C# => class C extends AnyRef { +1 decls }
[54:10..54:10]:   test/T#C#`<init>`(). => primary ctor <init>()
[55:9..55:10]:    test/T#X# => class X extends AnyRef { +1 decls }
[55:10..55:10]:   test/T#X#`<init>`(). => primary ctor <init>()
[56:7..56:8]:     test/T#x. => val method x: X
[59:8..59:12]:    test/Test. => final object Test extends AnyRef { +4 decls }
[60:9..60:10]:    test/Test.M# => class M extends AnyRef { +2 decls }
[60:11..60:11]:   test/Test.M#`<init>`(). => primary ctor <init>()
[61:9..61:10]:    test/Test.M#m(). => method m: Int
[64:9..64:10]:    test/Test.N# => trait N extends AnyRef { +1 decls }
[65:9..65:10]:    test/Test.N#n(). => method n: Int
[68:9..68:10]:    test/Test.C# => class C extends M { +35 decls }
[68:11..68:11]:   test/Test.C#`<init>`(). => primary ctor <init>()
[69:9..69:10]:    test/Test.C#p. => val method p: P
[70:9..70:10]:    test/Test.C#x. => val method x: p.X
[72:9..72:17]:    test/Test.C#typeRef1. => val method typeRef1: C
[73:9..73:17]:    test/Test.C#typeRef2. => val method typeRef2: p.C
[74:9..74:17]:    test/Test.C#typeRef3. => val method typeRef3: T#C
[75:9..75:17]:    test/Test.C#typeRef4. => val method typeRef4: List[Int]
[77:9..77:20]:    test/Test.C#singleType1. => val method singleType1: x.type
[78:9..78:20]:    test/Test.C#singleType2. => val method singleType2: p.x.type
[79:9..79:15]:    test/Test.C#Either. => val method Either: Either.type
[81:9..81:18]:    test/Test.C#thisType1. => val method thisType1: C.this.type
[82:9..82:18]:    test/Test.C#thisType2. => val method thisType2: C.this.type
[84:9..84:19]:    test/Test.C#superType1. => val method superType1: Int
[85:9..85:19]:    test/Test.C#superType2. => val method superType2: Int
[86:9..86:19]:    test/Test.C#superType3. => val method superType3: Int
[88:9..88:22]:    test/Test.C#compoundType1. => val method compoundType1: AnyRef { def k: Int }
[89:9..89:22]:    test/Test.C#compoundType2. => val method compoundType2: M with N {}
[90:9..90:22]:    test/Test.C#compoundType3. => val method compoundType3: M with N { def k: Int }
[91:9..91:22]:    test/Test.C#compoundType4. => val method compoundType4: AnyRef { def k: Int }
[92:9..92:22]:    test/Test.C#compoundType5. => val method compoundType5: M with N {}
[93:9..93:22]:    test/Test.C#compoundType6. => val method compoundType6: M with N { def k: Int }
[95:9..95:17]:    test/Test.C#annType1. => val method annType1: T @ann[Int]
[96:9..96:17]:    test/Test.C#annType2. => val method annType2: T @ann1 @ann2
[98:9..98:25]:    test/Test.C#existentialType2. => val method existentialType2: List[_] forSome { type _ }
[99:9..99:25]:    test/Test.C#existentialType3. => val method existentialType3: Class[?0] forSome { type ?0 }
[100:9..100:25]:  test/Test.C#existentialType4. => val method existentialType4: Class[?0] forSome { type ?0 }
[102:9..102:20]:  test/Test.C#typeLambda1(). => method typeLambda1[M[_]]: Nothing
[102:21..102:22]: test/Test.C#typeLambda1().[M] => typeparam M[_]
[105:12..105:26]: test/Test.C#ClassInfoType1. => final object ClassInfoType1 extends AnyRef
[106:11..106:25]: test/Test.C#ClassInfoType2# => class ClassInfoType2 extends B { +2 decls }
[106:26..106:26]: test/Test.C#ClassInfoType2#`<init>`(). => primary ctor <init>()
[106:42..106:43]: test/Test.C#ClassInfoType2#x(). => method x: Int
[107:11..107:25]: test/Test.C#ClassInfoType3# => trait ClassInfoType3[T] extends AnyRef
[107:26..107:27]: test/Test.C#ClassInfoType3#[T] => typeparam T
[109:12..109:22]: test/Test.C#MethodType. => final object MethodType extends AnyRef { +6 decls }
[110:11..110:13]: test/Test.C#MethodType.x1(). => method x1: Int
[111:11..111:13]: test/Test.C#MethodType.x2(). => method x2: Int
[112:11..112:13]: test/Test.C#MethodType.m3(). => method m3: Int
[113:11..113:13]: test/Test.C#MethodType.m4(). => method m4(): Int
[114:11..114:13]: test/Test.C#MethodType.m5(). => method m5(x: Int): Int
[114:14..114:15]: test/Test.C#MethodType.m5().(x) => param x: Int
[115:11..115:13]: test/Test.C#MethodType.m6(). => method m6[T](x: T): T
[115:14..115:15]: test/Test.C#MethodType.m6().[T] => typeparam T
[115:17..115:18]: test/Test.C#MethodType.m6().(x) => param x: T
[118:12..118:22]: test/Test.C#ByNameType. => final object ByNameType extends AnyRef { +1 decls }
[119:11..119:13]: test/Test.C#ByNameType.m1(). => method m1(x: => Int): Int
[119:14..119:15]: test/Test.C#ByNameType.m1().(x) => param x: => Int
[122:16..122:28]: test/Test.C#RepeatedType# => case class RepeatedType extends AnyRef with Product with Serializable { +12 decls }
[122:28..122:28]: test/Test.C#RepeatedType#`<init>`(). => primary ctor <init>(val s: String*)
[122:29..122:30]: test/Test.C#RepeatedType#s. => val method s: String*
[123:11..123:13]: test/Test.C#RepeatedType#m1(). => method m1(x: Int*): Int
[123:14..123:15]: test/Test.C#RepeatedType#m1().(x) => param x: Int*
[126:12..126:20]: test/Test.C#TypeType. => final object TypeType extends AnyRef { +5 decls }
[127:12..127:14]: test/Test.C#TypeType.T1# => abstract type T1
[128:11..128:13]: test/Test.C#TypeType.m2(). => method m2[T2 = C]: Nothing
[128:14..128:16]: test/Test.C#TypeType.m2().[T2] => typeparam T2 = C
[129:11..129:13]: test/Test.C#TypeType.m3(). => method m3[M3[_]]: Nothing
[129:14..129:16]: test/Test.C#TypeType.m3().[M3] => typeparam M3[_]
[130:12..130:14]: test/Test.C#TypeType.T4# => type T4 = C
[131:12..131:14]: test/Test.C#TypeType.T5# => type T5[U] = U
[131:15..131:16]: test/Test.C#TypeType.T5#[U] => typeparam U
[135:10..135:17]: test/Test.Literal. => final object Literal extends AnyRef { +11 decls }
[136:15..136:18]: test/Test.Literal.int. => final val method int: 1
[137:15..137:19]: test/Test.Literal.long. => final val method long: 1L
[138:15..138:20]: test/Test.Literal.float. => final val method float: 1.0f
[139:15..139:21]: test/Test.Literal.double. => final val method double: 2.0
[140:15..140:18]: test/Test.Literal.nil. => final val method nil: null
[141:15..141:19]: test/Test.Literal.char. => final val method char: 'a'
[142:15..142:21]: test/Test.Literal.string. => final val method string: "a"
[143:15..143:19]: test/Test.Literal.bool. => final val method bool: true
[144:15..144:19]: test/Test.Literal.unit. => final val method unit: Unit
[145:15..145:23]: test/Test.Literal.javaEnum. => final val method javaEnum: NOFOLLOW_LINKS.type
[146:15..146:22]: test/Test.Literal.clazzOf. => final val method clazzOf: Class[Option[Int]]