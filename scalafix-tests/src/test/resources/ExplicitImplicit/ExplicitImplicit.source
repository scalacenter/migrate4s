rewrites = ExplicitImplicit
<<< list
class A {
  implicit val x = List(1)
}
>>>
class A {
  implicit val x: List[Int] = List(1)
}
<<< map
class A {
  implicit val x = Map(1 -> "STRING")
}
>>>
class A {
  implicit val x: scala.collection.immutable.Map[Int, String] = Map(1 -> "STRING")
}
<<< def works
class A {
  implicit def x = 2
}
>>>
class A {
  implicit def x: Int = 2
}
<<< def param works
class A {
  implicit def x[T](e: T) = e
}
>>>
class A {
  implicit def x[T](e: T): T = e
}
<<< def param works 2
class A {
  implicit def x[T](e: T) = List(e)
}
>>>
class A {
  implicit def x[T](e: T): List[T] = List(e)
}
<<< def param works 3
class A {
  implicit def x[T](e: T) = Map(e -> e)
}
>>>
class A {
  implicit def x[T](e: T): scala.collection.immutable.Map[T, T] = Map(e -> e)
}
<<< type param
class A {
  implicit def x = new Array[String](10)
}
>>>
class A {
  implicit def x: Array[String] = new Array[String](10)
}
<<< T.this
class A {
  class B { class C }
  implicit val x = new B
  implicit val y = new x.C
}
>>>
class A {
  class B { class C }
  implicit val x: A.this.B = new B
  implicit val y: A.this.x.C = new x.C
}
<<< two classes
class A[T](e: T)
class B {
  implicit val x = new A(10)
}
>>>
class A[T](e: T)
class B {
  implicit val x: twoclasses.A[Int] = new A(10)
}
<<< deeper package
class A[T](e: T)
package foo {
  class B {
    implicit val x = new A(10)
  }
}
>>>
class A[T](e: T)
package foo {
  class B {
    implicit val x: deeperpackage.A[Int] = new A(10)
  }
}
<<< shallow package
package foo {
  class A[T](e: T)
}
class B {
  implicit val x = new foo.A(10)
}
>>>
package foo {
  class A[T](e: T)
}
class B {
  implicit val x: shallowpackage.foo.A[Int] = new foo.A(10)
}
<<< implicitly 2712 trick
class A {
  implicit val s = "string"
  implicit val x = implicitly[String]
}
>>>
class A {
  implicit val s: String = "string"
  implicit val x = implicitly[String]
}
<<< shorten imported name
import scala.collection.immutable.Map
class A {
  implicit val x = Map(1 -> "")
}
>>>
import scala.collection.immutable.Map
class A {
  implicit val x: scala.collection.immutable.Map[Int, String] = Map(1 -> "")
}
<<< shorten imported name 2
import scala.collection.immutable._
class A {
  implicit val x = Map(1 -> "")
}
>>>
import scala.collection.immutable._
class A {
  implicit val x: scala.collection.immutable.Map[Int, String] = Map(1 -> "")
}
<<< enclosing package strip is last
package b { class B }
package a {
  import b.B
  class A {
    implicit val x = new B
  }
}
>>>
package b { class B }
package a {
  import b.B
  class A {
    implicit val x: enclosingpackagestripislast.b.B = new B
  }
}
<<< inner inner object
object A {
  object B {
    class C
    object C {
      implicit val x = List(new C)
    }
  }
}
>>>
object A {
  object B {
    class C
    object C {
      implicit val x: List[innerinnerobject.A.B.C] = List(new C)
    }
  }
}
<<< sibling objects
object D {
  class B
}
object A {
  class C {
    implicit val x = List(new D.B)
  }
}
>>>
object D {
  class B
}
object A {
  class C {
    implicit val x: List[siblingobjects.D.B] = List(new D.B)
  }
}
<<< slick tuple
object slick {
  case class Supplier(id: Int, name: String)
  implicit val supplierGetter = (arg: (Int, String)) => Supplier(arg._1, arg._2)
}
>>>
object slick {
  case class Supplier(id: Int, name: String)
  implicit val supplierGetter: ((Int, String)) => slicktuple.slick.Supplier = (arg: (Int, String)) => Supplier(arg._1, arg._2)
}
<<< NOWRAP package import
package scala.concurrent {
  package banana {
    object x {
      implicit val f = Future.successful(1)
    }
  }
}
>>>
package scala.concurrent {
  package banana {
    object x {
      implicit val f: scala.concurrent.Future[Int] = Future.successful(1)
    }
  }
}
