rewrites = []
imports.organize = true
imports.removeUnused = true
imports.expandRelative = false
<<< duplicate
import scala.collection.mutable.ListBuffer
import scala.collection.mutable.ListBuffer
object a { ListBuffer(1) }
>>>
import scala.collection.mutable.ListBuffer
object a { ListBuffer(1) }
<<< duplicate with curly
import scala.collection.mutable.ListBuffer
import scala.collection.mutable.{HashMap, ListBuffer}
object a { ListBuffer(1) }
>>>
import scala.collection.mutable.ListBuffer
object a { ListBuffer(1) }
<<< unused
import scala.collection.mutable.ListBuffer
object a { List(1) }
>>>
object a { List(1) }
<<< rename used
import scala.collection.mutable.{ListBuffer => LB}
import scala.collection.mutable.{HashMap => HM}
object a { LB(1) }
>>>
import scala.collection.mutable.{ListBuffer => LB}
object a { LB(1) }
<<< annotation
import scala.annotation.tailrec
import scala.{ specialized => sp }
object a {
  @deprecated
  @tailrec
  def loop(sum: Int, xs: List[Int]): Int = loop(sum + xs.head, xs.tail)
}
trait CommutativeSemigroup[@sp(Int, Long, Float, Double) A] extends Any
>>>
import scala.annotation.tailrec
import scala.{specialized => sp}
object a {
  @deprecated
  @tailrec
  def loop(sum: Int, xs: List[Int]): Int = loop(sum + xs.head, xs.tail)
}
trait CommutativeSemigroup[@sp(Int, Long, Float, Double) A] extends Any
<<< type position
import scala.collection.mutable.ListBuffer
trait a {
  def lb: (Int, ListBuffer[Int])
}
>>>
import scala.collection.mutable.ListBuffer
trait a {
  def lb: (Int, ListBuffer[Int])
}
<<< catalysts.Platform
import catalysts.Platform
object a {
  def apply(): Boolean = (!Platform.isJs) && true
}
>>>
import catalysts.Platform
object a {
  def apply(): Boolean = (!Platform.isJs) && true
}
<<< extends trait
import org.scalatest.FunSuiteLike
trait Foo extends FunSuiteLike
>>>
import org.scalatest.FunSuiteLike
trait Foo extends FunSuiteLike
<<< import method
import scala.collection.mutable.ListBuffer.apply
object a { val x = apply(2) }
>>>
import scala.collection.mutable.ListBuffer.apply
object a { val x = apply(2) }
<<< relative import becomes unused
import scala.collection.mutable.ListBuffer
import ListBuffer._
object a { val x = empty[Int] }
>>>
import scala.collection.mutable.ListBuffer

import ListBuffer._
object a { val x = empty[Int] }
<<< pattern
import scala.concurrent.Future
import scala.util.Failure
import scala.util.Try
import scala.util.Success
object a {
  Try(1) match {
    case Success(a) => ()
    case Failure(a) => ()
  }
}
>>>
import scala.util.Failure
import scala.util.Success
import scala.util.Try
object a {
  Try(1) match {
    case Success(a) => ()
    case Failure(a) => ()
  }
}
<<< language imports
import scala.language.implicitConversions
import scala.language.higherKinds
object a { implicit def foo(x: Int): String = x.toString }
>>>
import scala.language.implicitConversions
object a { implicit def foo(x: Int): String = x.toString }
<<< SKIP macro string interpolator
import scalafix.tests.ImportMe.sc2xtensoin
object a { val x = foobar"kas" }
>>>
import scalafix.tests.ImportMe.sc2xtensoin
object a { val x = foobar"kas" }
<<< remove unused importee.name with wildcard
import scala.collection.immutable.{Seq, _}
object A { IntMap.empty[String] }
>>>
import scala.collection.immutable._
object A { IntMap.empty[String] }
<<< remove unused importee.Name
import scala.collection.immutable._
import scala.collection.immutable.Seq
object A { IntMap.empty[String] }
>>>
import scala.collection.immutable._
object A { IntMap.empty[String] }
<<< keep used importee.Name
import shapeless._
import scalafix.test.Generic
import scalafix.test._
object A { val x = Generic[Int]; new Used }
>>>
import scalafix.test._
import scalafix.test.Generic
import shapeless._
object A { val x = Generic[Int]; new Used }
<<< remove unused java import in trivial example
import java.util.UUID
object Test
>>>
object Test
